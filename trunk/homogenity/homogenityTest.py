import unittest
import Modules.homogenity

class homogenityTests(unittest.TestCase):
    
    def test_pop_count(self):
        pass
    
    def test_read_populations(self):
        pass
    
    def test_get_pop_list(self):
        #self.assertEqual(Modules.homogenity.homogenity.get_pop_list(),)
        self.assertEqual(Modules.homogenity.homogenity.get_pop_list(['36:0:23:0:0:0', '21:0:24:0:0:0', '11:0:10:0:0:0', '140:0:2:0:0:0', '130:0:3:0:0:0', '130:0:4:0:0:0']), [{'A': '36', 'C': '23', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '21', 'C': '24', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '11', 'C': '10', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '140', 'C': '2', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '130', 'C': '3', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '130', 'C': '4', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}])
        self.assertEqual(Modules.homogenity.homogenity.get_pop_list(['26:0:10:0:0:0', '18:0:11:0:0:0', '10:0:11:0:0:0', '154:0:0:0:0:0', '156:0:3:0:0:0', '132:0:0:0:0:0']), [{'A': '26', 'C': '10', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '18', 'C': '11', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '10', 'C': '11', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '154', 'C': '0', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '156', 'C': '3', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '132', 'C': '0', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}])
        self.assertEqual(Modules.homogenity.homogenity.get_pop_list(['0:0:52:23:0:0', '0:0:48:23:0:0', '0:0:26:10:0:0', '0:0:178:0:0:0', '0:0:165:1:0:0', '0:0:172:0:0:0']), [{'A': '0', 'C': '52', 'G': '23', 'N': '0', 'del': '0', 'T': '0'}, {'A': '0', 'C': '48', 'G': '23', 'N': '0', 'del': '0', 'T': '0'}, {'A': '0', 'C': '26', 'G': '10', 'N': '0', 'del': '0', 'T': '0'}, {'A': '0', 'C': '178', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '0', 'C': '165', 'G': '1', 'N': '0', 'del': '0', 'T': '0'}, {'A': '0', 'C': '172', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}])
        self.assertEqual(Modules.homogenity.homogenity.get_pop_list(['27:0:0:42:0:0', '36:0:0:36:0:0', '14:0:0:19:0:0', '0:0:0:96:0:0', '2:0:0:110:0:0', '0:0:0:118:0:0']), [{'A': '27', 'C': '0', 'G': '42', 'N': '0', 'del': '0', 'T': '0'}, {'A': '36', 'C': '0', 'G': '36', 'N': '0', 'del': '0', 'T': '0'}, {'A': '14', 'C': '0', 'G': '19', 'N': '0', 'del': '0', 'T': '0'}, {'A': '0', 'C': '0', 'G': '96', 'N': '0', 'del': '0', 'T': '0'}, {'A': '2', 'C': '0', 'G': '110', 'N': '0', 'del': '0', 'T': '0'}, {'A': '0', 'C': '0', 'G': '118', 'N': '0', 'del': '0', 'T': '0'}])
        self.assertEqual(Modules.homogenity.homogenity.get_pop_list(['0:0:26:39:0:0', '0:0:27:33:0:0', '0:0:12:16:0:0', '0:0:0:96:0:0', '0:0:0:112:0:0', '0:0:0:106:0:0']), [{'A': '0', 'C': '26', 'G': '39', 'N': '0', 'del': '0', 'T': '0'}, {'A': '0', 'C': '27', 'G': '33', 'N': '0', 'del': '0', 'T': '0'}, {'A': '0', 'C': '12', 'G': '16', 'N': '0', 'del': '0', 'T': '0'}, {'A': '0', 'C': '0', 'G': '96', 'N': '0', 'del': '0', 'T': '0'}, {'A': '0', 'C': '0', 'G': '112', 'N': '0', 'del': '0', 'T': '0'}, {'A': '0', 'C': '0', 'G': '106', 'N': '0', 'del': '0', 'T': '0'}])
        self.assertEqual(Modules.homogenity.homogenity.get_pop_list(['53:0:16:0:0:0', '41:0:16:0:0:0', '16:0:13:0:0:0', '174:0:0:0:0:0', '145:0:1:0:0:0', '188:0:2:0:0:0']), [{'A': '53', 'C': '16', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '41', 'C': '16', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '16', 'C': '13', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '174', 'C': '0', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '145', 'C': '1', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '188', 'C': '2', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}])
        self.assertEqual(Modules.homogenity.homogenity.get_pop_list(['41:0:18:0:0:0', '36:0:15:0:0:0', '16:0:11:0:0:0', '158:0:0:0:0:0', '170:0:1:0:0:0', '156:0:4:0:0:0']), [{'A': '41', 'C': '18', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '36', 'C': '15', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '16', 'C': '11', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '158', 'C': '0', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '170', 'C': '1', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '156', 'C': '4', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}])
        self.assertEqual(Modules.homogenity.homogenity.get_pop_list(['32:0:18:0:0:0', '19:0:19:0:0:0', '11:0:9:0:0:0', '126:0:4:0:0:0', '148:0:0:0:0:0', '104:0:4:0:0:0']), [{'A': '32', 'C': '18', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '19', 'C': '19', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '11', 'C': '9', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '126', 'C': '4', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '148', 'C': '0', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '104', 'C': '4', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}])
        self.assertEqual(Modules.homogenity.homogenity.get_pop_list(['38:0:52:0:0:0', '37:0:33:0:0:0', '4:0:16:0:0:0', '4:0:136:0:0:0', '5:0:129:0:0:0', '2:0:128:0:0:0']), [{'A': '38', 'C': '52', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '37', 'C': '33', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '4', 'C': '16', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '4', 'C': '136', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '5', 'C': '129', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '2', 'C': '128', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}])
        self.assertEqual(Modules.homogenity.homogenity.get_pop_list(['44:1:26:0:0:0', '44:0:14:0:0:0', '12:1:8:0:0:0', '164:0:2:0:0:0', '120:0:0:0:0:0', '156:2:0:0:0:0']), [{'A': '44', 'C': '26', 'G': '0', 'N': '0', 'del': '0', 'T': '1'}, {'A': '44', 'C': '14', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '12', 'C': '8', 'G': '0', 'N': '0', 'del': '0', 'T': '1'}, {'A': '164', 'C': '2', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '120', 'C': '0', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '156', 'C': '0', 'G': '0', 'N': '0', 'del': '0', 'T': '2'}])
                
    def test_get_major_alleles(self):
       
        self.assertEqual(Modules.homogenity.homogenity.get_major_alleles([{'A': '36', 'C': '23', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '21', 'C': '24', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '11', 'C': '10', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '140', 'C': '2', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '130', 'C': '3', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '130', 'C': '4', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}]),('A', 'C'))
        self.assertEqual(Modules.homogenity.homogenity.get_major_alleles([{'A': '26', 'C': '10', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '18', 'C': '11', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '10', 'C': '11', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '154', 'C': '0', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '156', 'C': '3', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '132', 'C': '0', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}]),('A', 'C'))
        self.assertEqual(Modules.homogenity.homogenity.get_major_alleles([{'A': '0', 'C': '52', 'G': '23', 'N': '0', 'del': '0', 'T': '0'}, {'A': '0', 'C': '48', 'G': '23', 'N': '0', 'del': '0', 'T': '0'}, {'A': '0', 'C': '26', 'G': '10', 'N': '0', 'del': '0', 'T': '0'}, {'A': '0', 'C': '178', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '0', 'C': '165', 'G': '1', 'N': '0', 'del': '0', 'T': '0'}, {'A': '0', 'C': '172', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}]),('C', 'G'))
        self.assertEqual(Modules.homogenity.homogenity.get_major_alleles([{'A': '27', 'C': '0', 'G': '42', 'N': '0', 'del': '0', 'T': '0'}, {'A': '36', 'C': '0', 'G': '36', 'N': '0', 'del': '0', 'T': '0'}, {'A': '14', 'C': '0', 'G': '19', 'N': '0', 'del': '0', 'T': '0'}, {'A': '0', 'C': '0', 'G': '96', 'N': '0', 'del': '0', 'T': '0'}, {'A': '2', 'C': '0', 'G': '110', 'N': '0', 'del': '0', 'T': '0'}, {'A': '0', 'C': '0', 'G': '118', 'N': '0', 'del': '0', 'T': '0'}]),('G', 'A'))
        self.assertEqual(Modules.homogenity.homogenity.get_major_alleles([{'A': '0', 'C': '26', 'G': '39', 'N': '0', 'del': '0', 'T': '0'}, {'A': '0', 'C': '27', 'G': '33', 'N': '0', 'del': '0', 'T': '0'}, {'A': '0', 'C': '12', 'G': '16', 'N': '0', 'del': '0', 'T': '0'}, {'A': '0', 'C': '0', 'G': '96', 'N': '0', 'del': '0', 'T': '0'}, {'A': '0', 'C': '0', 'G': '112', 'N': '0', 'del': '0', 'T': '0'}, {'A': '0', 'C': '0', 'G': '106', 'N': '0', 'del': '0', 'T': '0'}]),('G', 'C'))
        self.assertEqual(Modules.homogenity.homogenity.get_major_alleles([{'A': '53', 'C': '16', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '41', 'C': '16', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '16', 'C': '13', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '174', 'C': '0', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '145', 'C': '1', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '188', 'C': '2', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}]),('A', 'C'))
        self.assertEqual(Modules.homogenity.homogenity.get_major_alleles([{'A': '41', 'C': '18', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '36', 'C': '15', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '16', 'C': '11', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '158', 'C': '0', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '170', 'C': '1', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '156', 'C': '4', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}]),('A', 'C'))
        self.assertEqual(Modules.homogenity.homogenity.get_major_alleles([{'A': '32', 'C': '18', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '19', 'C': '19', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '11', 'C': '9', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '126', 'C': '4', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '148', 'C': '0', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '104', 'C': '4', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}]),('A', 'C'))
        self.assertEqual(Modules.homogenity.homogenity.get_major_alleles([{'A': '38', 'C': '52', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '37', 'C': '33', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '4', 'C': '16', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '4', 'C': '136', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '5', 'C': '129', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '2', 'C': '128', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}]),('C', 'A'))
        self.assertEqual(Modules.homogenity.homogenity.get_major_alleles([{'A': '44', 'C': '26', 'G': '0', 'N': '0', 'del': '0', 'T': '1'}, {'A': '44', 'C': '14', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '12', 'C': '8', 'G': '0', 'N': '0', 'del': '0', 'T': '1'}, {'A': '164', 'C': '2', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '120', 'C': '0', 'G': '0', 'N': '0', 'del': '0', 'T': '0'}, {'A': '156', 'C': '0', 'G': '0', 'N': '0', 'del': '0', 'T': '2'}]),('A', 'C'))


    def test_woolf_test(self):
        
        self.assertEqual(Modules.homogenity.homogenity.woolf_test([36.0, 140.0, 23.0, 2.0, 21.0, 130.0, 24.0, 3.0, 11.0, 130.0, 10.0, 4.0],['1-4', '2-5', '3-6']),0.865610355017075)
        self.assertEqual(Modules.homogenity.homogenity.woolf_test([26.0, 154.0, 10.0, 0.0, 18.0, 156.0, 11.0, 3.0, 10.0, 132.0, 11.0, 0.0],['1-4', '2-5', '3-6']),0.2755779708810425)        
        self.assertEqual(Modules.homogenity.homogenity.woolf_test([52.0, 178.0, 23.0, 0.0, 48.0, 165.0, 23.0, 1.0, 26.0, 172.0, 10.0, 0.0],['1-4', '2-5', '3-6']),0.7460348991453792)        
        self.assertEqual(Modules.homogenity.homogenity.woolf_test([42.0, 96.0, 27.0, 0.0, 36.0, 110.0, 36.0, 2.0, 19.0, 118.0, 14.0, 0.0],['1-4', '2-5', '3-6']),0.6085862997552507)        
        self.assertEqual(Modules.homogenity.homogenity.woolf_test([39.0, 96.0, 26.0, 0.0, 33.0, 112.0, 27.0, 0.0, 16.0, 106.0, 12.0, 0.0],['1-4', '2-5', '3-6']),0.9846278869897767)        
        self.assertEqual(Modules.homogenity.homogenity.woolf_test([53.0, 174.0, 16.0, 0.0, 41.0, 145.0, 16.0, 1.0, 16.0, 188.0, 13.0, 2.0],['1-4', '2-5', '3-6']),0.8164536691848654)        
        self.assertEqual(Modules.homogenity.homogenity.woolf_test([41.0, 158.0, 18.0, 0.0, 36.0, 170.0, 15.0, 1.0, 16.0, 156.0, 11.0, 4.0],['1-4', '2-5', '3-6']),0.49029265516015497)        
        self.assertEqual(Modules.homogenity.homogenity.woolf_test([32.0, 126.0, 18.0, 4.0, 19.0, 148.0, 19.0, 0.0, 11.0, 104.0, 9.0, 4.0],['1-4', '2-5', '3-6']),0.16730560150364404)        
        self.assertEqual(Modules.homogenity.homogenity.woolf_test([52.0, 136.0, 38.0, 4.0, 33.0, 129.0, 37.0, 5.0, 16.0, 128.0, 4.0, 2.0],['1-4', '2-5', '3-6']),0.8083111378238753)        
        self.assertEqual(Modules.homogenity.homogenity.woolf_test([44.0, 164.0, 26.0, 2.0, 44.0, 120.0, 14.0, 0.0, 12.0, 156.0, 8.0, 0.0],['1-4', '2-5', '3-6']),0.5664497015808418)
    
    def test_BD_test(self):
        self.assertEqual(Modules.homogenity.homogenity.BD_test([[36.0, 23.0, 140.0, 2.0], [21.0, 24.0, 130.0, 3.0], [11.0, 10.0, 130.0, 4.0]]),0.8637673441872202)
        self.assertEqual(Modules.homogenity.homogenity.BD_test([[26.0, 10.0, 154.0, 0.0], [18.0, 11.0, 156.0, 3.0], [10.0, 11.0, 132.0, 0.0]]),0.21574134495613229)
        self.assertEqual(Modules.homogenity.homogenity.BD_test([[52.0, 23.0, 178.0, 0.0], [48.0, 23.0, 165.0, 1.0], [26.0, 10.0, 172.0, 0.0]]),0.7369441205173034)
        self.assertEqual(Modules.homogenity.homogenity.BD_test([[42.0, 27.0, 96.0, 0.0], [36.0, 36.0, 110.0, 2.0], [19.0, 14.0, 118.0, 0.0]]),0.5866450221438533)
        self.assertEqual(Modules.homogenity.homogenity.BD_test([[39.0, 26.0, 96.0, 0.0], [33.0, 27.0, 112.0, 0.0], [16.0, 12.0, 106.0, 0.0]]),0.9847687867672723)
        self.assertEqual(Modules.homogenity.homogenity.BD_test([[53.0, 16.0, 174.0, 0.0], [41.0, 16.0, 145.0, 1.0], [16.0, 13.0, 188.0, 2.0]]),0.8105161641311861)
        self.assertEqual(Modules.homogenity.homogenity.BD_test([[41.0, 18.0, 158.0, 0.0], [36.0, 15.0, 170.0, 1.0], [16.0, 11.0, 156.0, 4.0]]),0.415315837034608)
        self.assertEqual(Modules.homogenity.homogenity.BD_test([[32.0, 18.0, 126.0, 4.0], [19.0, 19.0, 148.0, 0.0], [11.0, 9.0, 104.0, 4.0]]),0.07191353360963777)
        self.assertEqual(Modules.homogenity.homogenity.BD_test([[52.0, 38.0, 136.0, 4.0], [33.0, 37.0, 129.0, 5.0], [16.0, 4.0, 128.0, 2.0]]),0.8047505149333778)
        self.assertEqual(Modules.homogenity.homogenity.BD_test([[44.0, 26.0, 164.0, 2.0], [44.0, 14.0, 120.0, 0.0], [12.0, 8.0, 156.0, 0.0]]),0.5555412743468414)
        

if __name__=="__main__":
    unittest.main()